package Legion.GroupMembership

import scala.collection.concurrent.TrieMap
import Legion.PeerService
import Legion.Gossip._



object MemberState {
  type Path = List[String]

  trait S {
    val state: TrieMap[Path, PeerService]
    def create_group(path: Path): PeerService
  }


  class State(ST: S) {
    val state = S.state


    def update(path: Path, Op: PeerService => Unit) {
      state.get(path) map {x => Op(ps)}  
    }


    def join(grp: Path, node: Peer) = {
      def joinOp(ps: PeerService) = ps.join(node)
      update(path, joinOp)
    }


    def leave(grp: Path, node: Peer) = {
      def leaveOp(ps: PeerService) = ps.join(node)
      
    }

  }


}
